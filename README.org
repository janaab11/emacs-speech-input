#+TITLE: Emacs Speech Input

Personal set of tools for involving speech while working with Emacs. Once
stable, this place should provide a consistent API involving various kinds of
speech based acts and delegate to various backends.

The API will cover pieces like:
1. Voice activity detection
2. Hot word detection
3. Speaker Verification
4. Regular utterance transcription

For now, I am trying to set up a regular command-and-control stuff based on 4th
method using a kaldi backend.

* Building
Currently the program has following dependencies:

1. libtorch (download [[https://download.pytorch.org/libtorch/cpu/libtorch-cxx11-abi-shared-with-deps-1.3.0%2Bcpu.zip][here]] and extract to ~./resources/libtorch~) for running
   pytorch models.
2. fftw3
3. sndfile
4. cmocka for testing

Once libraries are present (default-ish paths), run ~make~ to build the
~esi-core.so~ dynamic module. Emacs dependencies are managed using cask so you
will need to do a ~cask install~.

For running tests, do ~make test~.

* Usage

** Transcriptions
A basic method working to get utterance transcription is:

#+begin_src emacs-lisp :exports both :results output
(print (esi-kaldi-transcribe (esi-record)))
#+end_src

#+RESULTS:
: 
: ((results ((alternatives ((transcript . "हिंदी टाइपिंग हार्ड है") (confidence . 0.95643747) (amScore . -193.49112) (lmScore . 74.76644)) ((transcript . "हिन्दी टाइपिंग हार्ड है") (confidence . 0.95627123) (amScore . -193.64983) (lmScore . 77.205894)) ((transcript . "हिंदी टाइपिंग हार्ड") (confidence . 0.95655245) (amScore . -188.42686) (lmScore . 72.58187)) ((transcript . "हिंदी टाइपिंग हार्ड हैं") (confidence . 0.95626295) (amScore . -190.64734) (lmScore . 76.06722)) ((transcript . "हिंदी टाइपिंग हार्ड हो") (confidence . 0.9561695) (amScore . -192.775) (lmScore . 78.29183)) ((transcript . "हिंदी टाइपिंग हार्ट है") (confidence . 0.95633703) (amScore . -188.41103) (lmScore . 74.07308)) ((transcript . "हिंदी टाइपिंग हार्ड हे") (confidence . 0.9560056) (amScore . -195.36325) (lmScore . 81.71566)) ((transcript . "हिन्दी टाइपिंग हार्ड") (confidence . 0.95634466) (amScore . -188.58557) (lmScore . 75.021324)) ((transcript . "हिंदी टाइपिंग हार्ड ही") (confidence . 0.95604974) (amScore . -193.18002) (lmScore . 80.17074)) ((transcript . "हिंदी टाइपिंग हाड़ है") (confidence . 0.9562279) (amScore . -188.7901) (lmScore . 75.78988))))))

For inserting transcription at point, use ~esi-insert-text~.

** Speech embeddings
We rely on pretrained model from [[https://github.com/resemble-ai/Resemblyzer/commit/ca308cb68cb4f14ebfaad81e3dead2c29a67322b][Resemblyzer]]'s repo for getting fixed length
speech embeddings. To get embedding vector:

#+begin_src emacs-lisp :exports both :results output
  (let ((emb-model (esi-core--load-embed-model "./resources/embedding-model.pt"))
        (sr 16000))
    (print (esi-core--embed-model-run emb-model (esi-core-wav-to-samples (esi-record sr)) sr)))
#+end_src

#+RESULTS:
: 
: [0.0 0.06767932325601578 0.0 0.0 0.054283712059259415 0.0 0.1362369954586029 0.009020696394145489 0.0 0.0 0.049749523401260376 0.10139542818069458 0.11711474508047104 0.0 0.0 0.10938811302185059 0.0 0.018629487603902817 0.00034687432344071567 0.0 0.0 0.0 0.0 0.0 0.0 0.007567331660538912 0.0 0.018114222213625908 0.0 0.0 0.06853150576353073 0.06913239508867264 0.0 0.0 0.0 0.1705557256937027 0.15231838822364807 0.03817897289991379 0.03431622311472893 0.0 0.0 0.0 0.06751210987567902 0.07370476424694061 0.0 0.0 0.0 0.04905427619814873 0.11377058923244476 0.0 0.0 0.0724962055683136 0.0 0.0 0.04324807599186897 0.0 0.03821660950779915 0.0 0.0 0.0650620236992836 0.0 0.0 0.0 0.1133548840880394 0.0 0.0 0.02985573373734951 0.026266494765877724 0.0 0.0 0.0 0.14063051342964172 0.0 0.06181463599205017 0.018870960921049118 0.1895395964384079 0.0 0.0628567785024643 0.04670507088303566 0.07668717205524445 0.0 0.0 0.18525917828083038 0.0 0.009201358072459698 0.0 0.0 0.01783675141632557 0.02946934476494789 0.04424254223704338 0.024714140221476555 0.0 0.043750811368227005 0.0 0.0 0.0 0.0063267843797802925 0.0 0.0 0.0 0.0 0.007922163233160973 0.0 0.0 0.0 0.07057829201221466 0.08124622702598572 0.016159402206540108 0.0 0.14463172852993011 0.0 0.02218015491962433 0.0 0.10679282993078232 0.06924820691347122 0.0 0.053868770599365234 0.04667294770479202 0.0 0.0 0.09895721077919006 0.08532649278640747 0.220825657248497 0.0 0.17770735919475555 0.14890031516551971 0.0 0.059810563921928406 0.05657041817903519 0.0 0.0 0.027186427265405655 0.05542518198490143 0.151418074965477 0.057929735630750656 0.05872964486479759 0.0 0.0 0.0 0.0 0.0 0.11684311181306839 0.16712595522403717 0.07515747100114822 0.05399900674819946 0.0 0.07723995298147202 0.0 0.06352712959051132 0.05907712131738663 0.0527980700135231 0.060296960175037384 0.0 0.022709058597683907 0.0 0.07074591517448425 0.13279983401298523 0.0 0.0 0.0 0.06946023553609848 0.0 0.0 0.11189431697130203 0.02377874217927456 0.017661472782492638 0.0 0.08302856236696243 0.01196353044360876 0.023803558200597763 0.0 0.0 0.0 0.010711414739489555 0.0 0.0 0.06823507696390152 0.09241245687007904 0.12464312463998795 0.0 0.03832683339715004 0.10160123556852341 0.0 0.0 0.013480840250849724 0.0 0.0 0.04381106421351433 0.02954118512570858 0.0 0.0671050176024437 0.13530664145946503 0.0 0.10969331860542297 0.0 0.0 0.0 0.05498737469315529 0.014531704597175121 0.11776468902826309 0.02865816280245781 0.0 0.0 0.09909062832593918 0.0 0.0 0.03404570743441582 0.09682848304510117 0.0 0.0 0.0 0.0 0.05704610049724579 0.1189970150589943 0.0 0.0010606884025037289 0.0 0.000725665595382452 0.0 0.0 0.16604486107826233 0.040427032858133316 0.0 0.0 0.11544299870729446 0.1191624328494072 0.0 0.018836094066500664 0.0 0.0 0.0 0.0 0.0 0.0 0.08271922171115875 0.16569368541240692 0.08821235597133636 0.02467753179371357 0.20906329154968262 0.008793403394520283 0.05765530467033386 0.03323233872652054 0.19492949545383453 0.0 0.0 0.022762855514883995 0.040856458246707916 0.0 0.12172308564186096 0.18033036589622498 0.0 0.04951583966612816 0.0 0.0 0.0 0.0]
